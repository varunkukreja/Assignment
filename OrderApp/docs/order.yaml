paths:
  /order:                # path of the order from endpoint
    post:                 # endpoint request type (post request)
      security:
        - bearerAuth: []
      tags:               # Tag property
        - Order            # Value of the tag
      summary: creates a new order
      produces:
      - application/json
      parameters:         # request parameters
      - in: body          # request body
        name: create order     # name of request, can be any name
        description: It enables a user to create an order
        required: false   # can also be true depending on user preference
        schema:           # Schema definition
          $ref: '#/definitions/order' 
      responses:  
       200:       # server responses
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 200
           message:
            type: string
            example: Order has been created successfully.
       404:
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 404
           message:
            type: string
            example: A product with the specified ID was not found.
       500:
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 500
           message:
            type: string
            example: An error has occurred.      
/order:                # path of the order from endpoint
    get:                # endpoint request type (get request)
      security:
        - bearerAuth: [] 
      tags:               # Tag property
        - Order            # Value of the tag
      summary: Get all orders
      produces:
      - application/json
      responses:  
       200:       # server responses
        description: An array of order.
        schema:
          type: array
          properties:
           id:
            type: number
            example: 12345
           productName:
            type: string
            example: "RON 95"
           status:
            type: string
            example: "Cancelled"
           cost:
            type: number
            example: 20.00
           createdAt:
            type: string
            example: "06-Apr-2019 01:07:13"
            
       400:
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 404
           message:
            type: string
            example: Payment declined and the order is cancelled..
       500:
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 500
           message:
            type: string
            example: An error has occurred. 
/order/status/{id}:                # path of the order from endpoint
    get:                           # endpoint request type (get request)
      security:
        - bearerAuth: []
      tags:               # Tag property
        - Order            # Value of the tag
      summary: Get order status
      produces:
      - application/json
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:  
       200:       # server responses
        description: An object.
        schema:
          type: object
          properties:
           status:
            type: string
            example: "Cancelled"
            
       404:
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 404
           message:
            type: string
            example: A order with the specified ID was not found.
       500:
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 500
           message:
            type: string
            example: An error has occurred.
/order/cancel:                # path of the order from endpoint
    post:                     # endpoint request type (post request)
      security:
        - bearerAuth: []            
      tags:               # Tag property
        - Order            # Value of the tag
      summary: cancel order
      produces:
      - application/json
      parameters:         # request parameters
      - in: body          # request body
        name: create order     # name of request, can be any name
        description: It enables a user to cancel an order
        required: false   # can also be true depending on user preference
        schema:           # Schema definition
          type: object
          properties:
           id:
            type: string
      responses:  
       200:       # server responses
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 200
           message:
            type: string
            example: Order has been cancelled successfully.
       404:
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 404
           message:
            type: string
            example: A order with the specified ID was not found.
       500:
        description: A object.
        schema:
          type: object
          properties:
           status:
            type: number
            example: 500
           message:
            type: string
            example: An error has occurred.               
                            
definitions:        # Schema defination for request body
  order:
    properties:
     productName:
      type: string
      example: "Apple"
     cost:
      type: number
      example: 23.45